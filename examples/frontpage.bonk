// Bonk ships with a small standard library.
// Let's use it to calculate the sum of the 20 first square numbers which are even:
let total =
    let first20 = iota 20 in
    let squares = map ([x] x * x) first20 in
    let evens = filter ([x] x % 2 = 0) squares in
    fold (+) 0 evens
in

// We can do the same thing more succintly with the pipeline operator.
// Bonk supports shadowing, so we can shadow the previous binding:
let total =
    iota 20
    |> map ([x] x * x)
    |> filter ([x] x % 2 = 0)
    |> fold (+) 0
in

// Bonk supports sum types:
sum MyList<'a> =
    | MyNil unit
    | MyCons 'a * MyList<'a>

// ... and recursive functions, which go well together:
rec makeList = [n]
    if n < 0 then MyNil ()
    else MyCons (n, makeList (n - 1))
in

rec sumList = [lst]
    match lst with
    | MyNil _ -> 0
    | MyCons (x, xs) -> x + sumList xs
in

// Let's print out some results:
let total2 = sumList (makeList 10) in
let _ = printfn total in
let _ = printfn total2 in