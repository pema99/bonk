sum List 'a
    = Cons 'a * List 'a
    | Nil unit
in

let map = rec [map] [f] [lst]
    match lst with
    | Cons (h, t) -> Cons (f h, map f t)
    | Nil _       -> Nil () 
in

let fold = rec [fold] [f] [z] [lst]
    match lst with
    | Cons (h, t) -> f (h) (fold f z t)
    | Nil _       -> z
in

let myList = Cons (1, Cons (2, Cons (3, Nil ()))) in

let r1 = map ([x] x * 5) myList in
let r2 = fold ([x] [y] x + y) 0 r1 in
r2