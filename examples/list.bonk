// Bonk supports sum types.
sum List 'a =
    | Cons 'a * List 'a
    | Nil unit

// And recursive functions, though functions are just named lambdas.
rec map = [f] [lst]
    match lst with
    | Cons (h, t) -> Cons (f h, map f t)
    | Nil _       -> Nil () 
in

rec fold = [f] [z] [lst]
    match lst with
    | Cons (h, t) -> f (h) (fold f z t)
    | Nil _       -> z
in

// There is small standard library with functions like 'iota' and 'filter'.
// Let's use them to calculate the sub of the 20 first square numbers which are even:
let myList = iota 20 in
let r1 = map ([x] x * x) myList in
let r2 = filter ([x] x % 2 = 0) r1 in
let r3 = fold (+) 0 r2 in
r3