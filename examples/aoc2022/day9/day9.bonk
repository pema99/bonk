
let content = readFile "examples/aoc2022/day9/input.txt" in
let lines = splitString (indexString "\n" 0) content in

// Lol, lmao
let move = [(tx, ty)] [(hx, hy)]
    let (dx, dy) = (hx - tx, hy - ty) in
    let (adx, ady) = (absi dx, absi dy) in
    if tx = hx then
        if (ty < hy) && ady > 1 then (tx, ty + 1)
        else if (ty > hy) && ady > 1 then (tx, ty - 1)
        else (tx, ty)
    else if ty = hy then
        if (tx < hx) && adx > 1 then (tx + 1, ty)
        else if (tx > hx) && adx > 1 then (tx - 1, ty)
        else (tx, ty)
    else
        if (adx + ady) > 2 then
            if (tx < hx) && (ty < hy) then (tx+1, ty+1)
            else if (tx < hx) && (ty > hy) then (tx+1, ty-1)
            else if (tx > hx) && (ty < hy) then (tx-1, ty+1)
            else if (tx > hx) && (ty > hy) then (tx-1, ty-1)
            else (tx, ty)
        else (tx, ty)
in

rec expand = [lines] [acc]
    match lines with
    | Cons (h, t) ->
        let res = splitString ' ' h in
        let dir = getOption "" (nth 0 res) in
        let len = getOption "" (nth 1 res) in
        let len = toInt len in
        let steps = replicate len dir in
        let acc = append acc steps in
        expand t acc
    | Nil -> acc
in

let steps = expand lines (Nil) in

rec moveTails = [ts] [prev]
    match ts with
    | Cons (h, t) -> Cons (move h prev, moveTails t h)
    | Nil -> Nil
in

rec solution = [steps] [ts] [(hx, hy)] [acc]
    match steps with
    | Cons (h, t) ->
        let (hx, hy) =
            if h = "U" then (hx, hy + 1)
            else if h = "D" then (hx, hy - 1)
            else if h = "L" then (hx - 1, hy)
            else (hx + 1, hy)
        in
        let ts = moveTails ts (hx, hy) in
        let (lx, ly) = getOption (0, 0) (head (reverse ts)) in
        if exists ([x] fst x = lx && snd x = ly) acc then
            solution t ts (hx, hy) acc
        else
            solution t ts (hx, hy) (Cons ((lx, ly), acc))
    | Nil -> acc
in

// Part 1
let acc = solution steps (Cons ((0, 0), Nil)) (0, 0) (Nil) in
let _ = print (toString (length acc) + "\n") in

// Part 2
let acc = solution steps (replicate 9 (0, 0)) (0, 0) (Nil) in
let _ = print (toString (length acc) + "\n") in