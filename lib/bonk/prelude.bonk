// --- Basics module ---
let fst = [(a, b)] a in 
let snd = [(a, b)] b in 
let compose = [f] [g] [l] f (g l) in 
let flip = [(a, b)] (b, a) in 
let konst = [k] [_] k in 
let ignore = [k] () in 
let curry = [f] [a] [b] f (a, b) in 
let uncurry = [f] [(a, b)] f a b in 
let not = [b] if b then false else true in 

// --- Numbers module ---
let negi = [i] 0 - i in
let negf = [f] 0.0 - f in
let absi = [i] if i < 0 then negi i else i in
let absf = [f] if f < 0.0 then negf f else f in
let signi = [i] if i = 0 then 0 else if i < 0 then (negi 1) else 1 in
let signf = [f] if f = 0.0 then 0.0 else if f < 0.0 then (negf 1.0) else 1.0 in
let max = [a] [b] if a > b then a else b in
let min = [a] [b] if a < b then a else b in

// --- Option module ---
sum Option 'a =
    | Some 'a
    | None unit
in

let mapOption = [f] [o]
    match o with
    | Some a -> Some (f a)
    | None _ -> None ()
in

let bindOption = [f] [o]
    match o with
    | Some a -> f a
    | None _ -> None ()
in

let getOption = [def] [o]
    match o with
    | Some a -> a
    | None _ -> def
in

let isSome = [o]
    match o with
    | Some _ -> true
    | None _ -> false
in

let isNone = [o]
    match o with
    | Some _ -> false
    | None _ -> true
in

// --- List module ---
sum List 'a = 
    | Cons 'a * List 'a 
    | Nil unit 
in 

rec map = [f] [lst] 
    match lst with 
    | Cons (h, t) -> Cons (f h, map f t) 
    | Nil _       -> Nil ()  
in 

rec fold = [f] [z] [lst]
    match lst with
    | Cons (h, t) -> fold f (f z h) (t)
    | Nil _       -> z
in

rec filter = [f] [lst]
    match lst with
    | Cons (h, t) ->
        if f h
        then Cons (h, filter f t)
        else filter f t
    | Nil _       -> Nil _
in

rec length = [lst]
    match lst with
    | Cons (h, t) -> 1 + length t
    | Nil _       -> 0
in

let iota = [n]
    rec inner = [acc]
        if acc >= n then Nil ()
        else Cons (acc, inner (acc + 1))
    in
    inner 0
in

rec replicate = [i] [n]
    if n > 0 then Cons (i, replicate i (n - 1))
    else Nil ()
in

rec append = [a] [b]
    match a with
    | Cons (h, t) -> Cons (h, append t b)
    | Nil _       -> b
in

rec nth = [n] [lst]
    match lst with
    | Cons (h, t) ->
        if n < 0 then None ()
        else if n = 0 then Some h
        else nth (n-1) t
    | Nil _       -> None ()
in

let exists = [f] [lst]
    length (filter f lst) > 0
in

rec forall = [f] [lst]
    match lst with
    | Cons (h, t) -> (f h) && (forall f t)
    | Nil _       -> true
in

let head = [lst]
    match lst with
    | Cons (h, _) -> Some h
    | Nil _       -> None ()
in

let tail = [lst]
    match lst with
    | Cons (h, t) -> Some t
    | Nil _       -> None ()
in

let find = [f] [lst]
    head (filter f lst)
in

let reverse = [lst]
    rec reverseInner = [lst] [acc]
        match lst with
        | Cons (h, t) -> reverseInner t (Cons (h, acc))
        | Nil () -> acc
    in
    reverseInner lst (Nil ())
in

let take = [n] [lst]
    rec takeInner = [n] [lst] [acc]
        if n = 0 then
            acc
        else
            match lst with
            | Cons (h, t) -> takeInner (n - 1) t (Cons (h, acc))
            | Nil () -> Nil ()
    in
    reverse (takeInner n lst (Nil ()))
in

rec skip = [n] [lst]
    if n = 0 then
        lst
    else
        match lst with
        | Cons (h, t) -> skip (n - 1) t
        | Nil () -> Nil ()
in

let replace = [n] [v] [lst]
    rec replaceInner = [lst] [i] [acc]
        match lst with
        | Cons (h, t) -> replaceInner t (i + 1) (Cons (if i = n then v else h, acc))
        | Nil () -> acc
    in
    reverse (replaceInner lst 0 (Nil ()))
in

let zip = [l] [r]
    rec zipInner = [l] [r] [acc]
        match (l, r) with
        | (Cons (lh, lt), Cons (rh, rt)) ->
            zipInner lt rt (Cons ((lh, rh), acc))
        | _ -> acc
    in
    reverse (zipInner l r (Nil ()))
in

let unzip = [lst]
    rec unzipInner = [lst] [accl] [accr]
        match lst with
        | Cons ((lh, rh), lt) ->
            unzipInner lt (Cons (lh, accl)) (Cons (rh, accr))
        | _ -> (accl, accr)
    in
    let (l, r) = unzipInner lst (Nil ()) (Nil ()) in
    (reverse l, reverse r)
in

rec stringToList = [str]
    let len = lengthString str in
    if len = 0 then Nil ()
    else Cons (indexString str 0, stringToList (substring str 1 (len - 1)))
in

rec listToString = [lst]
    match lst with
    | Cons (h, t) -> (toString h) + listToString t
    | Nil _       -> ""
in

// --- Either module ---
sum Either 'a 'b =
    | Left 'a
    | Right 'b
in

let mapLeft = [f] [o]
    match o with
    | Left a -> Left (f a)
    | Right a -> Right a
in

let mapRight = [f] [o]
    match o with
    | Left a -> Left a
    | Right a -> Right (f a)
in

let bindLeft = [f] [o]
    match o with
    | Left a -> f a
    | Right a -> Right a
in

let bindRight = [f] [o]
    match o with
    | Left a -> Left a
    | Right a -> f a
in

let isLeft = [o]
    match o with
    | Left _ -> true
    | Right _ -> false
in

let isRight = [o]
    match o with
    | Left _ -> false
    | Right _ -> true
in

let getLeft = [def] [o]
    match o with
    | Left a -> a
    | Right _ -> def
in

let getRight = [def] [o]
    match o with
    | Left _ -> def
    | Right a -> a
in

// --- String module ---
let splitString = [sep] [str]
    rec splitInner = [f] [s] [acc]
        if (f + s) >= lengthString str then
            Cons (substring str f s, acc)
        else
            let next = indexString str (f + s) in
            if next = sep then
                let lst = (Cons (substring str f s, acc)) in
                splitInner (f+s+1) 0 lst
            else
                splitInner f (s + 1) acc
    in reverse (splitInner 0 0 (Nil ()))
in
